module full_Adder(
    input a, 
    input b, 
    input c_in,
    output c_out, s
);
    assign s = a ^ b ^ c_in;
    assign c_out = ( a & b) | (a & c_in) | (b & c_in);
endmodule


module testbench;

    full_Adder dut (
        .a(a),
        .b(b),
        .c_in(c_in),
        .c_out(c_out),
        .s(s)
    );

    reg a, b, c_in;

    wire c_out, s;

    initial begin
        a = 1'b0; b = 1'b0; c_in = 1'b0;
        #10;

        a = 1'b0; b = 1'b1; c_in = 1'b0;
        #10;

        a = 1'b1; b = 1'b0; c_in = 1'b0;
        #10;

        a = 1'b1; b = 1'b1; c_in = 1'b0;
        #10;

        a = 1'b0; b = 1'b0; c_in = 1'b1;
        #10;

        a = 1'b0; b = 1'b1; c_in = 1'b1;
        #10;
     
        a = 1'b1; b = 1'b0; c_in = 1'b1;
        #10;
     
        a = 1'b1; b = 1'b1; c_in = 1'b1;
        #10;
        
        $finish; 
    end

endmodule
