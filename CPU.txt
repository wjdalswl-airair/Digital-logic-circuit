module cpu (
    input clk,
    input reset,
    output [7:0] pc_out,
    output [7:0] acc_out
);
    wire [7:0] instruction;
    wire [7:0] decoded_op;
    wire [7:0] decoded_operand;
    wire [7:0] result;
    wire [7:0] pc;
    wire [7:0] acc;

    fetch fetch_stage (
        .clk(clk),
        .reset(reset),
        .pc(pc),
        .instruction(instruction)
    );

    decode decode_stage (
        .clk(clk),
        .instruction(instruction),
        .op(decoded_op),
        .operand(decoded_operand)
    );

    execute execute_stage (
        .clk(clk),
        .op(decoded_op),
        .operand(decoded_operand),
        .acc(acc),
        .result(result)
    );

    // Program Counter
    always @(posedge clk or posedge reset) begin
        if (reset)
            pc <= 8'b0;
        else if (decoded_op == 8'b00000101) // JMP
            pc <= decoded_operand;
        else
            pc <= pc + 1;
    end

    // Accumulator
    always @(posedge clk or posedge reset) begin
        if (reset)
            acc <= 8'b0;
        else
            acc <= result;
    end

    assign pc_out = pc;
    assign acc_out = acc;

endmodule
